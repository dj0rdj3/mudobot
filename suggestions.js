const { Client, MessageEmbed } = require('discord.js');
const redis = require("redis");
const bluebird = require("bluebird");
const fs = require("fs");
const config = require("./config.json");
const client = new Client();
bluebird.promisifyAll(redis.RedisClient.prototype);
const db = redis.createClient({
    port: config.dbport,
    host: config.dbhost
});
let stat = "–†–∞–∑–º–∞—Ç—Ä–∞ —Å–µ";

client.on('ready', () => {
    console.log('active');
});

client.on('message', message => {
    if (message.author.bot) return;
    if (!message.guild) return;
    let args = message.content.slice(config.prefix.length).trim().split(/ +/g);
    const command = args.shift().toLowerCase();
    const cntnt = message.content.slice(config.prefix.length).slice(command.length).trim().split(/ +/g);

    if (message.channel.id === config.suggestions) {
        const c = message.content;
        if (c.includes(".jpg") || c.includes(".png") || c.includes(".jpeg") || c.includes(".gif")) {
            embed = new MessageEmbed();
            message.delete().then(() => {
                message.channel.send(embed).then(e => {
                    fs.readFile('./next_n.json', 'utf8', function(err, fl) {
                        if (err) console.log(err);
                        else {
                            let next_n = JSON.parse(fl);
                            db.hset('suggestions', next_n.next_n, e.id);
                            e.edit(embed
                                .setTitle(`–ï–º–æ—ü–∏ —Å—É–≥–µ—Å—Ç–∏—ò–∞ #${next_n.next_n} –æ–¥ ${message.member.displayName}`)
                                .setThumbnail(message.author.displayAvatarURL())
                                .setColor('#00FF00')
                                .setImage(message.content)
                                .addField("–°—Ç–∞—Ç—É—Å", stat));
                            e.react('üëç').then(() => { e.react('üëé') });
                            next_n.next_n++;
                            let json = JSON.stringify(next_n);
                            fs.writeFile('./next_n.json', json, 'utf8', function(err) {
                                if (err) console.log(err);
                            });
                        }
                    });
                });
            });
        } else {
            embed = new MessageEmbed();
            message.delete().then(() => {
                message.channel.send(embed).then(e => {
                    fs.readFile('./next_n.json', 'utf8', function(err, fl) {
                        if (err) console.log(err);
                        else {
                            let next_n = JSON.parse(fl);
                            db.hset('suggestions', next_n.next_n, e.id);
                            e.edit(embed
                                .setTitle(`–°—É–≥–µ—Å—Ç–∏—ò–∞ #${next_n.next_n} –æ–¥ ${message.member.displayName}`)
                                .setThumbnail(message.author.displayAvatarURL())
                                .setColor('#00FF00')
                                .setDescription(message.content)
                                .addField("–°—Ç–∞—Ç—É—Å", stat));
                            e.react('üëç').then(() => { e.react('üëé') });
                            next_n.next_n++;
                            let json = JSON.stringify(next_n);
                            fs.writeFile('./next_n.json', json, 'utf8', function(err) {
                                if (err) console.log(err);
                            });
                        }
                    });
                });
            });
        }
    }

    if (command === "sugestija" && message.member.roles.cache.has(config.modID)) {
        let chan = message.guild.channels.cache.get(config.suggestions);
        let brs = cntnt[0];
        let newstat = cntnt.slice(1).toString().replace(/,/g, " ");
        db.hmget('suggestions', brs, function(err, dat) {
            chan.messages.fetch(dat[0]).then(msg => {
                if (msg.embeds[0].title.includes("–ï–º–æ—ü–∏")) {
                    let embed = new MessageEmbed();
                    msg.edit(embed
                        .setTitle(msg.embeds[0].title)
                        .setImage(msg.embeds[0].image.url)
                        .setThumbnail(msg.embeds[0].thumbnail.url)
                        .setColor('#00FF00')
                        .addField('–°—Ç–∞—Ç—É—Å', newstat)
                    )
                } else {
                    let embed = new MessageEmbed();
                    msg.edit(embed
                        .setTitle(msg.embeds[0].title)
                        .setDescription(msg.embeds[0].description)
                        .setThumbnail(msg.embeds[0].thumbnail.url)
                        .setColor('#00FF00')
                        .addField('–°—Ç–∞—Ç—É—Å', newstat)
                    )
                }
            });
        });
    }

    if (command === "obrisisugestiju" && message.member.roles.cache.has(config.modID)) {
        let chan = message.guild.channels.cache.get(config.suggestions);
        let brs = cntnt[0];
        let newstat = cntnt.slice(1).toString().replace(/,/g, " ");
        db.hmget('suggestions', brs, function(err, dat) {
            chan.messages.fetch(dat[0]).then(msg => {
                let embed = new MessageEmbed();
                msg.edit(embed
                    .setTitle(`–°—É–≥–µ—Å—Ç–∏—ò–∞ #${brs}`)
                    .setDescription(`–°—É–≥–µ—Å—Ç–∏—ò–∞ –æ–±—Ä–∏—Å–∞–Ω–∞ ${newstat}`)
                    .setColor('#FF0000')
                )
            });
        });
    }

    if (command === "pravilasugestija" && message.author.id === config.ownerID) {
        message.delete();
        embed = new MessageEmbed()
            .setTitle("–ü—Ä–∞–≤–∏–ª–∞ –∏ —Å–º–µ—Ä–Ω–∏—Ü–µ –æ–∫–æ —Å—É–≥–µ—Å—Ç–∏—ò–∞")
            .setThumbnail(message.guild.iconURL())
            .setDescription("**–û–≤–¥–µ –º–æ–∂–µ—Ç–µ –¥–∞ –¥–∞—Ç–µ —Å—É–≥–µ—Å—Ç–∏—ò–µ –æ–∫–æ —Å–µ—Ä–≤–µ—Ä–∞. –ó–∞ —Å—É–≥–µ—Å—Ç–∏—ò–µ –æ–∫–æ –ú–µ–∫–æ –ú—É–¥–æ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞, —ò–∞–≤–∏—Ç–µ —Å–µ –º—É–¥–æ –ø–æ–≥–ª–∞–≤–∞—Ä–∏–º–∞.**\n\n‚Ä¢ –ì–ª–∞—Å–∞—Ç–µ –∑–∞ —Å—É–≥–µ—Å—Ç–∏—ò—É —Å–∞ —Ä–µ–∞–∫—Ü–∏—ò–æ–º :thumbsup: –∏–ª–∏ :thumbsdown: –∫–æ—ò–µ –ì–æ—Å–Ω –º—É–¥–æ –±–æ—Ç –∞—É—Ç–æ–º–∞—Ç—Å–∫–∏ –ø–æ—Å—Ç–∞–≤–∏\n\n‚Ä¢ –°—É–≥–µ—Å—Ç–∏—ò–µ —õ–µ —Å–µ –ø—Ä–∏—Ö–≤–∞—Ç–∏—Ç–∏ –∏–ª–∏ –æ–¥–±–∏—Ç–∏ –æ–¥ –≥–ª–∞–≤–Ω–∏—Ö –º—É–¥–∞ –Ω–∞–∫–æ–Ω –Ω–∞—ò–º–∞—ö–µ 24 —á–∞—Å–∞\n\n‚Ä¢ –ü–∏—à–∏—Ç–µ —Å–∞–º–æ —Å—É–≥–µ—Å—Ç–∏—ò–µ —É –æ–≤–æ–º –∫–∞–Ω–∞–ª—É. –ó–∞ —Ä–∞—Å–ø—Ä–∞–≤—ô–∞—ö–µ –æ —Å—É–≥–µ—Å—Ç–∏—ò–∞–º–∞, –∫–æ—Ä–∏—Å—Ç–∏—Ç–µ <#670679314538299397>\n\n**–ö–∞–∫–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ —Å—É–≥–µ—Å—Ç–∏—ò—É:**\n\n‚Ä¢ –°–≤–µ —Å—É–≥–µ—Å—Ç–∏—ò–µ —Å–µ –ø—Ä–∏–∫–∞–∑—É—ò—É –æ–¥ –ì–æ—Å–Ω –º—É–¥–æ –±–æ—Ç–∞. –°–∞–º–æ —Ç—Ä–µ–±–∞—Ç–µ –¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ —Å—É–≥–µ—Å—Ç–∏—ò—É —É —á–µ—Ç—É –∏ –∞—É—Ç–æ–º–∞—Ç—Å–∫–∏ —õ–µ —Å–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏.\n\n‚Ä¢ –°–≤–µ –µ–º–æ—ü–∏ —Å—É–≥–µ—Å—Ç–∏—ò–µ –º–æ—Ä–∞—ò—É –±–∏—Ç–∏ —É –æ–±–ª–∏–∫—É –ª–∏–Ω–∫–∞ –∏–Ω–∞—á–µ –Ω–µ—õ–µ —Ä–∞–¥–∏—Ç–∏\n\n‚Ä¢ –£ —Å–≤–æ—ò–æ—ò —Å—É–≥–µ—Å—Ç–∏—ò–∏ –æ–±—ò–∞—Å–Ω–∏—Ç–µ —Å–≤–æ—ò—É —Å—É–≥–µ—Å—Ç–∏—ò—É –∏ –Ω–∞–≥–ª–∞—Å–∏—Ç–µ –∑–±–æ–≥ —á–µ–≥–∞ –±–∏ —Ç—Ä–µ–±–∞–ª–∏ –¥–∞ —ò–µ –¥–æ–¥–∞–º–æ. –ù–∞ –ø—Ä–∏–º–µ—Ä, \"*–î–∞ —Å–µ –¥–æ–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–∞123*\" –Ω–∏—ò–µ –¥–æ–≤–æ—ô–Ω–æ, –Ω–µ–≥–æ –Ω–∞–º —Ç—Ä–µ–±–∞ –∏ –æ–±—ò–∞—à—ö–µ—ö–µ —à—Ç–∞ —Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–¥–∏.\n\n‚Ä¢ **–ù–µ–æ–∑–±–∏—ô–Ω–µ —Å—É–≥–µ—Å—Ç–∏—ò–µ —Å–µ –±—Ä–∏—à—É –∏ –Ω–µ–æ–º–æ–≥—É—õ–∞–≤–∞ —Å–µ –ø–æ—Å—Ç–∞–≤—ô–∞—ö–µ –Ω–æ–≤–∏—Ö –æ–¥ —Ç–µ –æ—Å–æ–±–µ.**\n")
            .setFooter("–•–≤–∞–ª–∞ —É–Ω–∞–ø—Ä–µ–¥.")
            .setColor('#00FF00');
        message.channel.send(embed);
    }

    function clean(text) {
        if (typeof(text) === "string")
            return text.replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));
        else
            return text;
    }

    if (command === "seval" && message.author.id === config.ownerID) {
        try {
            const code = args.join(" ");
            let evaled = eval(code);

            if (typeof evaled !== "string")
                evaled = require("util").inspect(evaled);

            message.channel.send(clean(evaled), { code: "xl" });
        } catch (err) {
            message.channel.send(`\`ERROR\` \`\`\`xl\n${clean(err)}\n\`\`\``);
        }
    }
});

client.login(config.token);